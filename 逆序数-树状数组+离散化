import java.io.*;
import java.util.*;

//离散化+树状数组
//n个数Ai (-999999999<=Ai && Ai<=999999999)  

public class 逆序数 {
	static StreamTokenizer in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));
	static PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
	static int[] hash, c;
	static int n;
	
	static class node{
		int id, val;
		public node(int id, int val) {
			this.id = id; this.val = val;
		}
	}
	static node[] e;
	
	public static void main(String[] args) throws IOException {
		
		while(in.nextToken()!=StreamTokenizer.TT_EOF) {
			n = (int)in.nval;  if(n == 0) break;
			e = new node[n+10]; 
			hash = new int[n+10]; 
			c = new int[n+10];
			long ans = 0;
			
			for(int i=1; i<=n; i++) {
				e[i] = new node(i,readInt());
			}
			Arrays.sort(e, 1, 1+n, new Comparator<node>() {
				@Override
				public int compare(node o1, node o2) {
					return o1.val - o2.val;
				}
			});
			for(int i=1; i<=n; i++) //离散化
				hash[e[i].id] = i;
			
			for(int i=1; i<=n; i++) {
				update(hash[i],1);
				ans += i-Sum(hash[i]);// 统计当前序列中大于x的数的个数
								// 当前序列中数的总个数  - 当前序列中小于等于x的数的个数
			}
			Print(ans+"\n");
		}
		
	}
	
	static int lowbit(int x) {
		return x&-x;
	}
	static long Sum(int i) {
		long sum = 0;
		while(lowbit(i)!=0) {
			sum += c[i];
			i -= lowbit(i);
		}
		return sum;
	}
	static void update(int i,int val) {
		while(i<=n) {
			c[i] += val;
			i += lowbit(i);
		}
	}
	
	static int readInt() throws IOException {
		in.nextToken();
		return (int)in.nval;
	}
	static void Print(String s){
		out.print(s); out.flush();
	}
	
}
