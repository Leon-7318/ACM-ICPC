//poj 3463

#include <iostream>
#include <cstring>
#include <cstdlib>
#include <cstdio>

#define MAXN 1010
#define MAXM 10010
#define INF 1000000000

using namespace std;

int n,m,cnt;

int head[MAXN], count[MAXN][2], dis[MAXN][2]; //count[x][0]源点到x的最短路条数 count[x][1]源点到x的次短路条数
bool vis[MAXN][2];

struct node{
	int v,w,next;
} edge[MAXM<<1];

void addEdge(int u,int v,int w){
	edge[cnt].v = v; //当前边的终点
	edge[cnt].w = w;
	edge[cnt].next = head[u]; //起点同为u的下一条边
	head[u] = cnt++; //起点为u的第一条边的下标
}

 void Dijkstra(int src, int des){
 	memset(vis,false,sizeof(vis));
 	memset(count,0,sizeof(count));
 	for(int i=0;i<=n;i++)dis[i][0]=dis[i][1]=INF;

 	dis[src][0] = 0;
 	count[src][0]=1;
 	int k,tmp,flag;

 	for(int i=1; i<=2*n-1; i++){
 		tmp = INF;
 		for(int j=1; j<=n; j++)
		 if(!vis[j][0] && tmp>dis[j][0]){
 			k = j; flag = 0; tmp = dis[j][0];
		 }else if(!vis[j][0] && tmp>dis[j][1]){
		 	k = j; flag = 1; tmp = dis[j][1];
		 }
 		if(tmp == INF) break;
 		vis[k][flag] = 1;
 		for(int j=head[k]; j!=-1; j=edge[j].next){
 			int v = edge[j].v;
 			if(dis[v][0]>tmp+edge[j].w){        //小于最短路
 				dis[v][1] = dis[v][0];
 				count[v][1] = count[v][0];
 				dis[v][0] = tmp + edge[j].w;
 				count[v][0] = count[k][flag];
			}else if(dis[v][0]==tmp+edge[j].w){ //等于最短路
                count[v][0] += count[k][flag];
			}else if(dis[v][1]>tmp+edge[j].w){  //小于次短路
                dis[v][1] = tmp + edge[j].w;
                count[v][1] = count[k][flag];
			}else if(dis[v][1]==tmp+edge[j].w){ //等于次短路
                count[v][1] += count[k][flag];
			}
		 }
	 }

    if(dis[des][1] == dis[des][0]+1)
        count[des][0] += count[des][1];
    printf("%d\n",count[des][0]);
 }

int main(){
	int u, v, w, t;
	scanf("%d",&t);
	while(t--){
        scanf("%d%d",&n,&m);
    	cnt = 0;
    	memset(head,-1,sizeof(head));
        for(int i = 1; i <= m; i++){
            scanf("%d%d%d", &u, &v, &w);
            addEdge(u, v, w);
        }
        int s, f;scanf("%d%d",&s,&f);
        Dijkstra(s,f);
    }
    return 0;
}

