#include <iostream>
#include <cstring>
#include <cstdlib>
#include <cstdio>
#include <queue>
#include <vector>

#define MAXN 1005
#define MAXM 500005
#define INF 1000000000

using namespace std;
	
/*
	k短路 A*+最短路； 
	A*: 估价函数 = 当前值+当前位置到终点的距离，即 F（p）=g（p）+h（p）
	
	POJ 2449 s-t 的k短路 
	求终点的单源最短路， 
*/	
	
	
int n,m, s,t, k, cnt;

int head[MAXN],xhead[MAXN];
bool vis[MAXN];
int dis[MAXN];

struct node{
	int v,w,next;
} edge[MAXM], xedge[MAXM]; 

void addEdge(int u,int v,int w){
	edge[cnt].v = v; //当前边的终点 
	edge[cnt].w = w;
	edge[cnt].next = head[u]; //起点同为u的下一条边 
	head[u] = cnt; //起点为u的第一条边的下标 
	
	xedge[cnt].v = u;	
	xedge[cnt].w = w;
	xedge[cnt].next = xhead[v];
	xhead[v] = cnt++;
}

 struct qnode{
 	int v,c;
 	qnode(int _v=0,int _c=0):v(_v),c(_c){}
 	bool operator <(const qnode &r)const{ return c>r.c;}
 };
 
 void Dijkstra(int n,int start){
 	
 	memset(vis,false,sizeof(vis));
 	for(int i=0;i<=n;i++)dis[i]=INF;
 	
 	priority_queue<qnode>que;
 	while(!que.empty())que.pop();
 	
 	dis[start]=0;
 	que.push(qnode(start,0));
 	qnode tmp;
 	while(!que.empty()){
 		tmp=que.top();
 		que.pop();
 		int u=tmp.v;
 		if(vis[u])continue;
 		vis[u]=true;
 		for(int i=xhead[u]; i!=-1; i=xedge[i].next){
 			int v = xedge[i].v;
 			int w = xedge[i].w;
 			if(!vis[v] && dis[v]>dis[u]+w){
 				dis[v] = dis[u]+w;
			 	que.push(qnode(v,dis[v]));
			 }
		 }
 	}
 }

struct A
{
    int f, g, v;
    bool operator <(const A a)const {
        if(a.f == f) return a.g < g;
        return a.f < f;
    }
};

int Astar(int src, int des){
    int cnt = 0;
    priority_queue<A>Q;
    if(src == des) k++;
    if(dis[src] == INF) return -1;
    A t, tt;
    t.v = src, t.g = 0, t.f = t.g + dis[src];
    Q.push(t);
    while(!Q.empty()){
        tt = Q.top(); Q.pop();
        if(tt.v == des){
            cnt++;
            if(cnt == k) return tt.g;
        }
        int u = tt.v;
        for(int i=head[u]; i!=-1; i=edge[i].next){
        	t.v = edge[i].v;
        	t.g = tt.g + edge[i].w; 
        	t.f = t.g + dis[t.v];
			Q.push(t);
		}
    }
    return -1;
}

int main(){
	int x, y, w;
    while(scanf("%d%d", &n, &m) != EOF){
    	cnt = 0;
    	memset(head,-1,sizeof(head));
    	memset(xhead,-1,sizeof(xhead));
        for(int i = 1; i <= m; i++){
            scanf("%d%d%d", &x, &y, &w);
            addEdge(x, y, w);
        }
        scanf("%d%d%d",&s,&t,&k);
        Dijkstra(n,t);
		printf("%d\n",Astar(s,t));
    }
    return 0;
} 
