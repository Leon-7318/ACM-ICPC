#include <iostream>
#include <cstring>
#include <cstdlib>
#include <cstdio>
#include <queue>
#include <vector>

#define MAXN 1005
#define MAXM 500005
#define INF 1000000000

using namespace std;
	
int n,m,cnt;

int head[MAXN],dis[MAXN];
bool vis[MAXN];

struct node{
	int v,w,next;
} edge[MAXM]; 

void addEdge(int u,int v,int w){
	edge[cnt].v = v; //当前边的终点 
	edge[cnt].w = w;
	edge[cnt].next = head[u]; //起点同为u的下一条边 
	head[u] = cnt++; //起点为u的第一条边的下标 
}

 struct qnode{
 	int v,c;
 	qnode(int _v=0,int _c=0):v(_v),c(_c){}
 	bool operator <(const qnode &r)const{ return c>r.c;}
 };
 
 void Dijkstra(int n,int start){
 	
 	memset(vis,false,sizeof(vis));
 	for(int i=0;i<=n;i++)dis[i]=INF;
 	
 	priority_queue<qnode>que;
 	while(!que.empty())que.pop();
 	
 	dis[start]=0;
 	que.push(qnode(start,0));
 	qnode tmp;
 	while(!que.empty()){
 		tmp=que.top();
 		que.pop();
 		int u=tmp.v;
 		if(vis[u])continue;
 		vis[u]=true;
 		for(int i=head[u]; i!=-1; i=edge[i].next){
 			int v = edge[i].v;
 			int w = edge[i].w;
 			if(!vis[v] && dis[v]>dis[u]+w){
 				dis[v] = dis[u]+w;
			 	que.push(qnode(v,dis[v]));
			 }
		 }
 	}
 }

int main(){
	int u, v, w;
    while(scanf("%d%d", &n, &m) != EOF){
    	cnt = 0;
    	memset(head,-1,sizeof(head));
    	
        for(int i = 1; i <= m; i++){
            scanf("%d%d%d", &u, &v, &w);
            addEdge(u, v, w);
            addEdge(v, u, w);
        }
        Dijkstra(n,1);
        for(int i=1; i<=n; i++)
        	printf("%d\n",dis[i]);
    }
    return 0;
} 
//5 7
//1 2 5
//1 3 20
//1 4 15
//2 4 3
//3 4 2
//3 5 1
//4 5 10
