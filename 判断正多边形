import java.io.*;
import java.util.*;

//给出n个点的坐标 判断这n个点是否能构成一个正多边形

public class Main {
	
	static Scanner sc = new Scanner(System.in);
	
	static class Point{
		float X, Y, angle;
		public Point(float x, float y){
			this.X = x;  this.Y = y;
		}
	}
	static Point[] p;
	static Point pc;
	static double R;
	
	public static void main(String[] args) {
		
		int t = sc.nextInt();
		w1:while(t-->0){
			int n = sc.nextInt();
			p = new Point[n+10];
			for(int i=1; i<=n; i++)
				p[i] = new Point(sc.nextFloat(),sc.nextFloat());

			if(n%2==0){
				int k = 0;
				double max = 0;
				for(int i=2; i<=n; i++)
					if(getDis(p[1],p[i])>max){
						max = getDis(p[1],p[i]);
						k = i;
					}
				pc = new Point((p[1].X+p[k].X)/2,(p[1].Y+p[k].Y)/2);
				R = max/2;
			}else{
				int k1 = 0, k2 = 0;
				double max = 0;
				for(int i=2; i<=n; i++)
					if(getDis(p[1],p[i])>max){
						max = getDis(p[1],p[i]);
						k1 = i;
					}
				for(int i=2; i<=n; i++)
					if(getDis(p[1],p[i])==max && i != k1){
						k2 = i;
					}
				if(k2==0){
					System.out.println("NO");
					continue w1;
				}
				GetCircular(p[1], p[k1], p[k2]);
			}
			/*
			System.out.println(pc.X+" "+pc.Y+" "+R);
			for(int i=1; i<=n; i++)
				System.out.println(getDis(p[i], pc));
			*/
			
			double len = getDis(p[1],pc);
			for(int i=2; i<=n; i++)
				if(getDis(p[i], pc)!=len){
					System.out.println("NO");
					continue w1;
				}
			
			//对圆上的点进行顺时针排序
			Arrays.sort(p,1,n+1,new Comparator<Point>() {
				@Override
				public int compare(Point p1, Point p2) {
					
					if(p1.X>pc.X && p2.X>pc.X)
						return (int) (p2.Y - p1.Y);
					if(p1.X>pc.X && p2.X<pc.X || p1.X<pc.X && p2.X>pc.X)
						return (int) (p2.X - p1.X);
					if(p1.X<pc.X && p2.X<pc.X)
						return (int) (p1.Y - p2.Y);
					
					if(p1.X==pc.X && p1.Y==pc.Y)
						return (int) (p2.Y - p1.Y);
					
					if(p1.X==pc.X && p1.Y==pc.Y-2*R){
						if(p2.X>pc.X)
							return (int) (p2.Y - p1.Y);
						else
							return (int) (p1.Y - p2.Y);
					}
					
					return 0;
				}
			});

//			for(int i=1; i<=n; i++)
//				System.out.println(p[i].X+" "+p[i].Y);
			
			double e = getAngle(pc, p[1], p[n]);
			int f = 0;
			for(int i=2; i<n; i++)
				if(getAngle(pc, p[i-1], p[i])!=e){
					f = 1; break;
				}
			if(f==0)
				System.out.println("YES");
			else
				System.out.println("NO");
			
		}
		
	}
	//已知圆心及圆上两点 求夹角(<180)
	public static float getAngle(Point cen, Point first, Point second) { 
	    float dx1, dx2, dy1, dy2; 
	    float angle; 
	    dx1 = first.X - cen.X; 
	    dy1 = first.Y - cen.Y; 
	    dx2 = second.X - cen.X; 
	    dy2 = second.Y - cen.Y; 

	    float c = (float)Math.sqrt(dx1 * dx1 + dy1 * dy1) * (float)Math.sqrt(dx2 * dx2 + dy2 * dy2); 
	    if (c == 0) return -1; 
	    angle = (float)Math.acos((dx1 * dx2 + dy1 * dy2) / c); 
	    
	    if(new Float(angle).isNaN())
	    	return (float) Math.PI;
	    return angle; 
	} 
	
	//两点间距
	public static double getDis(Point p1, Point p2){
		return Math.sqrt( Math.pow((p1.X - p2.X), 2) + Math.pow(p1.Y-p2.Y, 2));
	}
	//已知圆上三点 求圆心、半径
    public static void GetCircular(Point P1,Point P2,Point P3){
        float a = 2 * (P2.X - P1.X);
        float b = 2 * (P2.Y - P1.Y);
        float c = P2.X * P2.X + P2.Y * P2.Y - P1.X * P1.X - P1.Y * P1.Y;
        float d = 2 * (P3.X - P2.X);
        float e = 2 * (P3.Y - P2.Y);
        float f = P3.X * P3.X + P3.Y * P3.Y - P2.X * P2.X - P2.Y * P2.Y;
        float x = (b * f - e * c) / (b * d - e * a);
        float y = (d * c - a * f) / (b * d - e * a);
        float r = (float)Math.sqrt( (double)((x - P1.X) * (x - P1.X) + (y - P1.Y) * (y - P1.Y)));
        R = r;
        pc = new Point(x,y);
    }

}
